(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))t(n);new MutationObserver(n=>{for(const o of n)if(o.type==="childList")for(const r of o.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&t(r)}).observe(document,{childList:!0,subtree:!0});function s(n){const o={};return n.integrity&&(o.integrity=n.integrity),n.referrerPolicy&&(o.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?o.credentials="include":n.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function t(n){if(n.ep)return;n.ep=!0;const o=s(n);fetch(n.href,o)}})();function w(i){document.readyState==="loading"?document.addEventListener("DOMContentLoaded",i):setTimeout(i,0)}function u(i){return document.querySelector(i)}function O(i){return document.querySelectorAll(i)}const p=9,m=[1,2,3,4,5,6,7,8,0],M={1:[2,4],2:[1,3,5],3:[2,6],4:[1,7,5],5:[2,4,6,8],6:[3,5,9],7:[4,8],8:[7,5,9],9:[8,6]};function I(i){if(i.length!==m.length)return!1;for(let e=0;e<m.length;e++)if(i[e]!==m[e])return!1;return!0}function C(i){return i+1}function k(i){return i-1}function E(i,e,s){let t=0;const n=Math.sqrt(s);if(n!==Math.floor(n))return console.error("numSquares must be a perfect square for Manhattan distance calculation."),1/0;for(let o=0;o<i.length;o++){const r=i[o];if(r!==0&&r!==null){const a=Math.floor(o/n),l=o%n,c=e.indexOf(r);if(c===-1){console.warn(`Tile value ${r} not found in goal state during Manhattan calculation.`);continue}const d=Math.floor(c/n),h=c%n;t+=Math.abs(a-d)+Math.abs(l-h)}}return t}function B(i,e,s,t,n){return{state:i,parent:e,action:s,g:t,h:n,f:t+n}}function y(i,e){if(i.length!==e.length)return!1;for(let s=0;s<i.length;s++)if(i[s]!==e[s])return!1;return!0}function D(i){const e=[];let s=i;for(;s&&s.parent;)s.action&&e.unshift(s.action),s=s.parent;return e}function P(i){const e=i.filter(t=>t!==0&&t!==null);let s=0;for(let t=0;t<e.length;t++)for(let n=t+1;n<e.length;n++)e[t]>e[n]&&s++;return s%2===0}function T(i,e){if(y(i,m))return[];if(!P(i))return null;const t=[B(i,null,null,0,E(i,m,p))],n=new Set;n.add(i.toString());const o=1e5;let r=0;for(;t.length>0&&r<o;){r++,t.sort((h,f)=>h.f-f.f);const a=t.shift();if(!a)return null;if(y(a.state,m))return D(a);const l=a.state.indexOf(0);if(l===-1)return console.error("A* Search Error: No empty square (0) found in the current state:",a.state),null;const c=C(l),d=e[c];if(!d){console.error(`A* Search Error: No adjacency information found for square number ${c}.`);continue}for(const h of d){const f=k(h),v=a.state[f];if(v===null){console.warn(`A* Search Warning: Attempted to move a null tile from index ${f}.`);continue}const S=[...a.state];S[l]=v,S[f]=0;const A=S.toString();if(n.has(A))continue;const b=a.g+1,N=E(S,m,p),L=b+N;let q=-1;for(let g=0;g<t.length;g++){const x=t[g];if(x&&y(x.state,S)){q=g;break}}if(q!==-1){const g=t[q];if(g&&g.f<=L)continue;t.splice(q,1)}const $=B(S,a,{tileValue:v,fromIndex:f,toIndex:l},b,N);t.push($),n.add(A)}}return r>=o&&console.warn(`A* search reached maximum iterations (${o}) without finding a solution.`),null}class F{constructor(){this.currentMoves=0,this.solutionActions=[],this.animationDuration=300,this.mixButton=u("#mix"),this.solveButton=u("#solve"),this.movesInput=u("#moves"),this.movesNumArea=u("#moves_num"),this.botMessageArea=u("#bot_message"),this.gameArea=u(".game"),this.squares=O(".square"),(!this.gameArea||this.squares.length!==p)&&console.error("Critical game elements (.game area or .square) not found or incorrect count in the DOM."),this.freeSquareId=this.findInitialFreeSquareIdSafe(),this.boundHandleSquareClick=this.handleSquareClick.bind(this),this.init()}init(){var e,s;this.bindSquareClicks(),(e=this.mixButton)==null||e.addEventListener("click",this.handleMixClick.bind(this)),(s=this.solveButton)==null||s.addEventListener("click",this.handleSolveClick.bind(this)),this.updateMovesCounter(0,"Player")}findInitialFreeSquareIdSafe(){var t;for(const n of Array.from(this.squares))if(n.classList.contains("free"))return`#${n.id}`;const e=`#sq-${p}`,s=u(e);return s?(console.warn(`No square initially had 'free' class. Defaulting to ${e}.`),s.classList.add("free"),e):(console.error(`Cannot find last square (#sq-${p}). Defaulting to #sq-9.`),(t=u("#sq-9"))==null||t.classList.add("free"),"#sq-9")}bindSquareClicks(){this.squares.forEach(e=>{e.removeEventListener("click",this.boundHandleSquareClick),e.addEventListener("click",this.boundHandleSquareClick)})}toggleSquareInteraction(e){this.squares.forEach(s=>{e?s.removeEventListener("click",this.boundHandleSquareClick):(s.removeEventListener("click",this.boundHandleSquareClick),s.addEventListener("click",this.boundHandleSquareClick))})}async handleMoveLogic(e,s){this.toggleSquareInteraction(!0),this.toggleControlButtons(!0),await this.movePieceOnDOM(e,s),this.currentMoves++,this.updateMovesCounter(this.currentMoves,"Player");const t=this.getBoardStateFromDOM();I(t)?(this.displayMessage("Congratulations! You solved it!","success"),await this.triggerWinAnimation()):(this.toggleSquareInteraction(!1),this.toggleControlButtons(!1))}toggleControlButtons(e){this.mixButton&&(this.mixButton.disabled=e),this.solveButton&&(this.solveButton.disabled=e)}displayMessage(e,s="info"){this.botMessageArea?this.botMessageArea.textContent=e:console.warn("Bot message area not found. Message:",e)}updateMovesCounter(e,s){this.movesNumArea&&(e===null?this.movesNumArea.textContent="":this.movesNumArea.textContent=`# of moves: ${e} (${s})`),s!=="Bot"&&(this.currentMoves=e??0)}movePieceOnDOM(e,s){const t=u(e),n=u(s);if(!t||!n)return console.error("Cannot find squares for animation",{pieceSquareIdToMove:e,targetFreeSquareId:s}),Promise.resolve();const o=t.firstElementChild;return o?new Promise(r=>{const a=t.getBoundingClientRect(),l=n.getBoundingClientRect(),c=l.left-a.left,d=l.top-a.top;t.style.zIndex="100",t.style.transform=`translateX(${c}px) translateY(${d}px) translateZ(25px)`;const h=f=>{f.propertyName!=="transform"||f.target!==t||(t.removeEventListener("transitionend",h),t.style.transition="none",t.style.transform="translateZ(5px)",t.style.zIndex="",t.offsetHeight,n.appendChild(o),t.classList.add("free"),n.classList.remove("free"),this.freeSquareId=`#${t.id}`,setTimeout(()=>{t.style.transition=""},0),r())};t.addEventListener("transitionend",h)}):(console.error("Moving square has no piece content",{pieceSquareIdToMove:e}),Promise.resolve())}async handleSquareClick(e){var a;const s=e.currentTarget;if(!(s!=null&&s.id)||s.classList.contains("free"))return;const t=s.id.split("-")[1],n=this.freeSquareId.startsWith("#sq-")?this.freeSquareId.substring(4):null;if(!t||!n)return;const o=parseInt(t,10),r=parseInt(n,10);(a=M[o])!=null&&a.includes(r)&&await this.handleMoveLogic(`#${s.id}`,this.freeSquareId)}async triggerWinAnimation(){var e;this.squares.forEach(s=>{if(!s.classList.contains("free")){const t=s.firstElementChild;t&&t.classList.add("success")}}),this.botMessageArea&&(this.botMessageArea.innerHTML='<h1>Congratulations!!!</h1><button id="play_again" class="btn">Play Again</button>',this.botMessageArea.classList.add("win-display"),this.botMessageArea.style.display="block",(e=this.botMessageArea.querySelector("#play_again"))==null||e.addEventListener("click",()=>window.location.reload())),this.toggleSquareInteraction(!0),this.toggleControlButtons(!0)}getBoardStateFromDOM(){var s;const e=[];for(let t=1;t<=p;t++){const n=`#sq-${t}`;if(n===this.freeSquareId)e.push(0);else{const o=(s=u(n))==null?void 0:s.firstElementChild;if(o!=null&&o.id){const r=o.id.split("-")[1];r?e.push(parseInt(r,10)):(console.warn(`Malformed piece ID '${o.id}'`),e.push(null))}else console.warn(`No valid piece in ${n}.`),e.push(null)}}return e}handleMixClick(){var n;let e=1e3;if((n=this.movesInput)!=null&&n.value){const o=parseInt(this.movesInput.value,10);!isNaN(o)&&o>0&&(e=o)}this.displayMessage(`Shuffling ${e} times...`,"info"),this.toggleControlButtons(!0),this.toggleSquareInteraction(!0);let s=0,t=parseInt(this.freeSquareId.substring(4),10);for(let o=0;o<e;o++){const r=M[t];if(!r||r.length===0)continue;const a=r[Math.floor(Math.random()*r.length)],l=u(`#sq-${a}`),c=u(`#sq-${t}`);if(l&&c){const d=l.firstElementChild;d&&c.appendChild(d),c.classList.remove("free"),l.classList.add("free"),this.freeSquareId=`#${l.id}`,t=parseInt(this.freeSquareId.substring(4),10),s++}}this.updateMovesCounter(s,"Mix"),this.displayMessage(`Shuffled ${s} times. Good luck!`,"info"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1),this.currentMoves=0}handleSolveClick(){this.displayMessage("Solving, please wait...","info"),this.toggleControlButtons(!0),this.toggleSquareInteraction(!0),setTimeout(()=>{const e=this.getBoardStateFromDOM();if(e.includes(null)){this.displayMessage("Error: Invalid board state.","error"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1);return}this.solutionActions=T(e,M)||[],this.solutionActions.length>0?(this.displayMessage(`Solution found! Animating ${this.solutionActions.length} moves...`,"info"),this.animateSolution()):(I(e)?this.displayMessage("Board is already solved!","success"):this.displayMessage("No solution found.","error"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1))},50)}async animateSolution(){if(this.solutionActions.length===0){this.displayMessage("No solution to animate or already solved.","info"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1);return}this.toggleSquareInteraction(!0);let e=0;const s=async()=>{if(e>=this.solutionActions.length){this.displayMessage("Animation complete!","success"),this.solutionActions=[],I(this.getBoardStateFromDOM())?await this.triggerWinAnimation():(this.toggleControlButtons(!1),this.toggleSquareInteraction(!1));return}const t=this.solutionActions[e];if(!t){console.error("Animation Error: Undefined action."),this.displayMessage("Animation error.","error"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1);return}const n=`#sq-${C(t.fromIndex)}`,o=`#sq-${C(t.toIndex)}`;if(this.freeSquareId!==o){console.error(`Animation Error: Mismatch. UI free: ${this.freeSquareId}, Action target: ${o}`,t),this.displayMessage("Animation state error.","error"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1);return}await this.movePieceOnDOM(n,o),this.updateMovesCounter(e+1,"Bot"),e++,setTimeout(s,this.animationDuration+100)};await s()}}w(()=>{new F});
//# sourceMappingURL=index-CpqPlEdx.js.map
