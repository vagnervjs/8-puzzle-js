(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))t(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const i of o.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&t(i)}).observe(document,{childList:!0,subtree:!0});function n(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function t(s){if(s.ep)return;s.ep=!0;const o=n(s);fetch(s.href,o)}})();(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))n(t);new MutationObserver(t=>{for(const s of t)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function e(t){const s={};return t.integrity&&(s.integrity=t.integrity),t.referrerPolicy&&(s.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?s.credentials="include":t.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(t){if(t.ep)return;t.ep=!0;const s=e(t);fetch(t.href,s)}})();function w(r){document.readyState==="loading"?document.addEventListener("DOMContentLoaded",r):setTimeout(r,0)}function l(r){return document.querySelector(r)}function O(r){return document.querySelectorAll(r)}const v=9,g=[1,2,3,4,5,6,7,8,0],S={1:[2,4],2:[1,3,5],3:[2,6],4:[1,7,5],5:[2,4,6,8],6:[3,5,9],7:[4,8],8:[7,5,9],9:[8,6]};function M(r){if(r.length!==g.length)return!1;for(let e=0;e<g.length;e++)if(r[e]!==g[e])return!1;return!0}function I(r){return r+1}function k(r){return r-1}function B(r,e,n){let t=0;const s=Math.sqrt(n);if(s!==Math.floor(s))return console.error("numSquares must be a perfect square for Manhattan distance calculation."),1/0;for(let o=0;o<r.length;o++){const i=r[o];if(i!==0&&i!==null){const a=Math.floor(o/s),u=o%s,c=e.indexOf(i);if(c===-1){console.warn(`Tile value ${i} not found in goal state during Manhattan calculation.`);continue}const f=Math.floor(c/s),d=c%s;t+=Math.abs(a-f)+Math.abs(u-d)}}return t}function $(r,e,n,t,s){return{state:r,parent:e,action:n,g:t,h:s,f:t+s}}function y(r,e){if(r.length!==e.length)return!1;for(let n=0;n<r.length;n++)if(r[n]!==e[n])return!1;return!0}function N(r){const e=[];let n=r;for(;n&&n.parent;)n.action&&e.unshift(n.action),n=n.parent;return e}function P(r){const e=r.filter(t=>t!==0&&t!==null);let n=0;for(let t=0;t<e.length;t++)for(let s=t+1;s<e.length;s++)e[t]>e[s]&&n++;return n%2===0}function D(r,e){if(y(r,g))return[];if(!P(r))return null;const n=[$(r,null,null,0,B(r,g,v))],t=new Set;t.add(r.toString());const s=1e5;let o=0;for(;n.length>0&&o<s;){o++,n.sort((f,d)=>f.f-d.f);const i=n.shift();if(!i)return null;if(y(i.state,g))return N(i);const a=i.state.indexOf(0);if(a===-1)return console.error("A* Search Error: No empty square (0) found in the current state:",i.state),null;const u=I(a),c=e[u];if(!c){console.error(`A* Search Error: No adjacency information found for square number ${u}.`);continue}for(const f of c){const d=k(f),m=i.state[d];if(m===null){console.warn(`A* Search Warning: Attempted to move a null tile from index ${d}.`);continue}const p=[...i.state];p[a]=m,p[d]=0;const C=p.toString();if(t.has(C))continue;const A=i.g+1,b=B(p,g,v),x=A+b;let q=-1;for(let h=0;h<n.length;h++){const L=n[h];if(L&&y(L.state,p)){q=h;break}}if(q!==-1){const h=n[q];if(h&&h.f<=x)continue;n.splice(q,1)}const E=$(p,i,{tileValue:m,fromIndex:d,toIndex:a},A,b);n.push(E),t.add(C)}}return o>=s&&console.warn(`A* search reached maximum iterations (${s}) without finding a solution.`),null}class T{constructor(){this.currentMoves=0,this.solutionActions=[],this.animationDuration=300,this.mixButton=l("#mix"),this.solveButton=l("#solve"),this.movesInput=l("#moves"),this.movesNumArea=l("#moves_num"),this.botMessageArea=l("#bot_message"),this.gameArea=l(".game"),this.squares=O(".square"),(!this.gameArea||this.squares.length!==v)&&console.error("Critical game elements (.game area or .square) not found or incorrect count in the DOM."),this.freeSquareId=this.findInitialFreeSquareIdSafe(),this.boundHandleSquareClick=this.handleSquareClick.bind(this),this.init()}init(){var e,n;this.bindSquareClicks(),(e=this.mixButton)==null||e.addEventListener("click",this.handleMixClick.bind(this)),(n=this.solveButton)==null||n.addEventListener("click",this.handleSolveClick.bind(this)),this.updateMovesCounter(0,"Player")}findInitialFreeSquareIdSafe(){var e;for(const s of Array.from(this.squares))if(s.classList.contains("free"))return`#${s.id}`;const n=`#sq-${v}`,t=l(n);return t?(console.warn(`No square initially had 'free' class. Defaulting to ${n}.`),t.classList.add("free"),n):(console.error(`Cannot find last square (#sq-${v}). Defaulting to #sq-9.`),(e=l("#sq-9"))==null||e.classList.add("free"),"#sq-9")}bindSquareClicks(){this.squares.forEach(e=>{e.removeEventListener("click",this.boundHandleSquareClick),e.addEventListener("click",this.boundHandleSquareClick)})}toggleSquareInteraction(e){this.squares.forEach(n=>{e?n.removeEventListener("click",this.boundHandleSquareClick):(n.removeEventListener("click",this.boundHandleSquareClick),n.addEventListener("click",this.boundHandleSquareClick))})}async handleMoveLogic(e,n){this.toggleSquareInteraction(!0),this.toggleControlButtons(!0),await this.movePieceOnDOM(e,n),this.currentMoves++,this.updateMovesCounter(this.currentMoves,"Player");const t=this.getBoardStateFromDOM();M(t)?(this.displayMessage("Congratulations! You solved it!","success"),await this.triggerWinAnimation()):(this.toggleSquareInteraction(!1),this.toggleControlButtons(!1))}toggleControlButtons(e){this.mixButton&&(this.mixButton.disabled=e),this.solveButton&&(this.solveButton.disabled=e)}displayMessage(e,n="info"){this.botMessageArea?this.botMessageArea.textContent=e:console.warn("Bot message area not found. Message:",e)}updateMovesCounter(e,n){this.movesNumArea&&(e===null?this.movesNumArea.textContent="":this.movesNumArea.textContent=`# of moves: ${e} (${n})`),n!=="Bot"&&(this.currentMoves=e??0)}movePieceOnDOM(e,n){const t=l(e),s=l(n);if(!t||!s)return console.error("Cannot find squares for animation",{pieceSquareIdToMove:e,targetFreeSquareId:n}),Promise.resolve();const o=t.firstElementChild;return o?new Promise(i=>{const a=t.getBoundingClientRect(),u=s.getBoundingClientRect(),c=u.left-a.left,f=u.top-a.top;t.style.zIndex="100",t.style.transform=`translateX(${c}px) translateY(${f}px) translateZ(25px)`;const d=m=>{m.propertyName!=="transform"||m.target!==t||(t.removeEventListener("transitionend",d),t.style.transition="none",t.style.transform="translateZ(5px)",t.style.zIndex="",t.offsetHeight,s.appendChild(o),t.classList.add("free"),s.classList.remove("free"),this.freeSquareId=`#${t.id}`,setTimeout(()=>{t.style.transition=""},0),i())};t.addEventListener("transitionend",d)}):(console.error("Moving square has no piece content",{pieceSquareIdToMove:e}),Promise.resolve())}async handleSquareClick(e){var n;const t=e.currentTarget;if(!(t!=null&&t.id)||t.classList.contains("free"))return;const s=t.id.split("-")[1],o=this.freeSquareId.startsWith("#sq-")?this.freeSquareId.substring(4):null;if(!s||!o)return;const i=parseInt(s,10),a=parseInt(o,10);(n=S[i])!=null&&n.includes(a)&&await this.handleMoveLogic(`#${t.id}`,this.freeSquareId)}async triggerWinAnimation(){var e;this.squares.forEach(n=>{if(!n.classList.contains("free")){const t=n.firstElementChild;t&&t.classList.add("success")}}),this.botMessageArea&&(this.botMessageArea.innerHTML='<h1>Congratulations!!!</h1><button id="play_again" class="btn">Play Again</button>',this.botMessageArea.classList.add("win-display"),this.botMessageArea.style.display="block",(e=this.botMessageArea.querySelector("#play_again"))==null||e.addEventListener("click",()=>window.location.reload())),this.toggleSquareInteraction(!0),this.toggleControlButtons(!0)}getBoardStateFromDOM(){var e;const n=[];for(let t=1;t<=v;t++){const s=`#sq-${t}`;if(s===this.freeSquareId)n.push(0);else{const o=(e=l(s))==null?void 0:e.firstElementChild;if(o!=null&&o.id){const i=o.id.split("-")[1];i?n.push(parseInt(i,10)):(console.warn(`Malformed piece ID '${o.id}'`),n.push(null))}else console.warn(`No valid piece in ${s}.`),n.push(null)}}return n}handleMixClick(){var e;let n=1e3;if((e=this.movesInput)!=null&&e.value){const o=parseInt(this.movesInput.value,10);!isNaN(o)&&o>0&&(n=o)}this.displayMessage(`Shuffling ${n} times...`,"info"),this.toggleControlButtons(!0),this.toggleSquareInteraction(!0);let t=0,s=parseInt(this.freeSquareId.substring(4),10);for(let o=0;o<n;o++){const i=S[s];if(!i||i.length===0)continue;const a=i[Math.floor(Math.random()*i.length)],u=l(`#sq-${a}`),c=l(`#sq-${s}`);if(u&&c){const f=u.firstElementChild;f&&c.appendChild(f),c.classList.remove("free"),u.classList.add("free"),this.freeSquareId=`#${u.id}`,s=parseInt(this.freeSquareId.substring(4),10),t++}}this.updateMovesCounter(t,"Mix"),this.displayMessage(`Shuffled ${t} times. Good luck!`,"info"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1),this.currentMoves=0}handleSolveClick(){this.displayMessage("Solving, please wait...","info"),this.toggleControlButtons(!0),this.toggleSquareInteraction(!0),setTimeout(()=>{const e=this.getBoardStateFromDOM();if(e.includes(null)){this.displayMessage("Error: Invalid board state.","error"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1);return}this.solutionActions=D(e,S)||[],this.solutionActions.length>0?(this.displayMessage(`Solution found! Animating ${this.solutionActions.length} moves...`,"info"),this.animateSolution()):(M(e)?this.displayMessage("Board is already solved!","success"):this.displayMessage("No solution found.","error"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1))},50)}async animateSolution(){if(this.solutionActions.length===0){this.displayMessage("No solution to animate or already solved.","info"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1);return}this.toggleSquareInteraction(!0);let e=0;const n=async()=>{if(e>=this.solutionActions.length){this.displayMessage("Animation complete!","success"),this.solutionActions=[],M(this.getBoardStateFromDOM())?await this.triggerWinAnimation():(this.toggleControlButtons(!1),this.toggleSquareInteraction(!1));return}const t=this.solutionActions[e];if(!t){console.error("Animation Error: Undefined action."),this.displayMessage("Animation error.","error"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1);return}const s=`#sq-${I(t.fromIndex)}`,o=`#sq-${I(t.toIndex)}`;if(this.freeSquareId!==o){console.error(`Animation Error: Mismatch. UI free: ${this.freeSquareId}, Action target: ${o}`,t),this.displayMessage("Animation state error.","error"),this.toggleControlButtons(!1),this.toggleSquareInteraction(!1);return}await this.movePieceOnDOM(s,o),this.updateMovesCounter(e+1,"Bot"),e++,setTimeout(n,this.animationDuration+100)};await n()}}w(()=>{new T});
//# sourceMappingURL=index-BtwETFYN.js.map
